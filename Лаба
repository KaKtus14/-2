import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

# Генеруємо дані для осі X та Y
x = np.linspace(0, 10, 1000)  # Створюємо 1000 точок від 0 до 10
y = np.sin(x) + 0.1 * np.random.randn(1000)  # Додаємо невеликий шум

# Нормалізація значень y до діапазону [0, 1]
y_min = y.min()
y_max = y.max()
y_normalized = (y - y_min) / (y_max - y_min)  # Min-Max нормалізація

# Розділяємо дані на навчальну та тестову вибірки
x_train, x_test, y_train, y_test = train_test_split(x, y_normalized, test_size=0.2, random_state=42)

# Підготовка до навчання KNN-регресора
k_values = range(1, 21)  # Значення K від 1 до 20
mse_values = []  # Для зберігання значень MSE

# Навчання KNN-регресора з різними значеннями K
for k in k_values:
    # Ініціалізація KNN-регресора
    knn_regressor = KNeighborsRegressor(n_neighbors=k)
    
    # Навчання моделі
    knn_regressor.fit(x_train.reshape(-1, 1), y_train)  # reshape для правильного формату
    
    # Прогнозування на тестових даних
    y_pred = knn_regressor.predict(x_test.reshape(-1, 1))
    
    # Обчислення середньоквадратичної похибки (MSE)
    mse = mean_squared_error(y_test, y_pred)
    mse_values.append(mse)

# Вибір найкращого K
best_k = k_values[np.argmin(mse_values)]
best_mse = min(mse_values)

# Виведення найкращого значення K та відповідної MSE
print(f"Найкраще значення K: {best_k}")
print(f"Середньоквадратична похибка (MSE) для K={best_k}: {best_mse}")

# Візуалізація отриманих рішень
# Ініціалізуємо KNN-регресор з найкращим K
knn_best = KNeighborsRegressor(n_neighbors=best_k)
knn_best.fit(x_train.reshape(-1, 1), y_train)  # Навчаємо на навчальних даних

# Прогнозування на тестових даних
y_best_pred = knn_best.predict(x_test.reshape(-1, 1))

# Візуалізація результатів
plt.figure(figsize=(12, 6))
plt.scatter(x_test, y_test, color='blue', label='Фактичні значення', alpha=0.5)
plt.scatter(x_test, y_best_pred, color='red', label='Прогнозовані значення', alpha=0.5)
plt.title(f'Реальні та прогнозовані значення для K={best_k}')
plt.xlabel('X')
plt.ylabel('Нормалізовані y')
plt.legend()
plt.grid(True)
plt.show()
